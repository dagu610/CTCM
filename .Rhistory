# import list and shapefiles of municipalities in DNK, SWE and DEU
DNK <- readRDS(url("https://biogeo.ucdavis.edu/data/gadm3.6/Rsf/gadm36_DNK_2_sf.rds"))[,c("NAME_0", "NAME_1", "NAME_2", "geometry")]
SWE <- readRDS(url("https://biogeo.ucdavis.edu/data/gadm3.6/Rsf/gadm36_SWE_2_sf.rds"))[,c("NAME_0", "NAME_1", "NAME_2", "geometry")]
DEU <- readRDS(url("https://biogeo.ucdavis.edu/data/gadm3.6/Rsf/gadm36_DEU_2_sf.rds"))[,c("NAME_0", "NAME_1", "NAME_2", "geometry")]
municip_polys <- rbind(DNK, DEU, SWE)
rm(DNK, DEU, SWE)
municip_polys <- st_set_precision(st_transform(municip_polys, 4326), 1e8)
colnames(municip_polys) <- c("country", "region", "municip", "geometry")
municip_polys$municip
type(municip_polys$municip)
is.type(municip_polys$municip)
typeof(municip_polys$municip)
class(municip_polys$municip)
class(municip_polys)
is.vector(municip_polys$municip)
is.list(municip_polys$municip)
install.packages("NCmisc")
library(NCmisc)
list.functions.in.file("CTCM_script.R", alphabetic = TRUE)
library(photosearcher)
api_key <- "8c7820687bfa51ef0cec8be65bb98fae"
# api_key <- "..."     # get an API key at https://www.flickr.com/services/apps/create/apply/
# and copy paste it between the quotation marks
library(flickRgeotag)
library(dplyr)
library(stringr)
library(sf)
library(pracma)
library(rnaturalearth)
library(rnaturalearthdata)
library(osrm)
library(countrycode)
library(jsonlite)
library(MASS)
library(VGAM)
library(glmmADMB)
library(glmmTMB)
library(rvest)
library(xml2)
library(ggplot2)
library(lubridate)
library(zoo)
library(lmtest)
library(stargazer)
library(patchwork)
source("debugged_functions.R")
source("get_profile_location.R")
source("get_home_location.R")
source("get_parishes.R")
tags <- c("jaegersborg", "j%C3%A6gersborg", "dyrehave", "dyrehaven", "jaegersborgdyrehave", "j%C3%A6gersborgdyrehave", "deer park", "deer")
data <- c()
count <- 1
while (count < 6){
photo_data <- photo_search(mindate_taken = "2004-01-01",
maxdate_taken = "2021-12-31",
tags = tags)
data <- rbind(data, photo_data)
rm(photo_data)
count <- count + 1
}
8c7820687bfa51ef0cec8be65bb98fae
while (count < 6){
photo_data <- photo_search(mindate_taken = "2004-01-01",
maxdate_taken = "2021-12-31",
tags = tags)
data <- rbind(data, photo_data)
rm(photo_data)
count <- count + 1
}
while (count < 6){
photo_data <- photo_search(mindate_taken = "2004-01-01",
maxdate_taken = "2021-12-31",
tags = tags)
data <- rbind(data, photo_data)
rm(photo_data)
count <- count + 1
}
photo_data <- photo_search(mindate_taken = "2004-01-01",
maxdate_taken = "2004-01-02",
tags = tags)
photo_data <- photo_search(mindate_taken = "2004-01-01",
maxdate_taken = "2004-01-10",
tags = tags)
photo_data <- photo_search(mindate_taken = "2004-01-01",
maxdate_taken = "2004-01-31",
tags = tags)
photo_data <- photo_search(mindate_taken = "2004-01-01",
maxdate_taken = "2005-01-31",
tags = tags)
View(photo_data)
data <- c()
data <- rbind(data, photo_data)
rm(photo_data)
# reduce to unique photos
data <- data[!duplicated(data[ , "id"]), ]
# delete columns that are not needed
data <- data[,c("id", "owner", "title", "datetaken", "tags", "latitude", "longitude", "accuracy")]
# delete pictures tagged outside a rectangular box around the study site
data_geo <- data[data$longitude > 12.53 & data$longitude < 12.6 & data$latitude > 55.765 & data$latitude < 55.84,]
rm(data, count)
# construct date and year columns for PUD and weights
data_geo$datetaken_notime <- substr(data_geo$datetaken, 0, 10)
data_geo$year <- substr(data_geo$datetaken, 0, 4)
data_geo$month <- substr(data_geo$datetaken, 6, 7)
# reduce to PUD
PUD_data_geo <- data_geo[!duplicated(data_geo[ , c("owner", "datetaken_notime")]), ]
rm(data_geo)
